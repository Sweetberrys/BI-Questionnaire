{"ast":null,"code":"import * as echarts from 'echarts';\nlet chartOption = {};\nexport default {\n  name: \"Chart\",\n  data() {\n    return {\n      pagesList: [],\n      tableData: [],\n      // 所有的数据\n      pageNum: 1,\n      // 当前的页码\n      pageSize: 4,\n      // 每页显示的个数\n      total: 0,\n      form: {},\n      backendData: '',\n      myChart: '',\n      chartOption: {},\n      // 新增chartOption属性\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}')\n    };\n  },\n  mounted() {\n    let chartDom = document.getElementById(\"aiOption\");\n    this.myChart = echarts.init(chartDom);\n    this.myChart.setOption(chartOption);\n  },\n  created() {\n    this.load(1);\n  },\n  // methods：本页面所有的点击事件或者其他函数定义区\n  methods: {\n    load(pageNum) {\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/chart/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize\n        }\n      }).then(res => {\n        this.chartOption = {};\n        if (res.data.genChart !== undefined) {\n          try {\n            this.chartOption = JSON.parse(res.data.genChart);\n            console.log(\"this.chartOption=\", this.chartOption);\n            this.myChart.setOption(this.chartOption); // 使用解析后的对象更新图表\n          } catch (error) {\n            console.error(\"解析chartOption时出错:\", error);\n            this.$message.error(\"图表配置解析失败\");\n          }\n        } else {\n          console.error(\"genChart 数据为 undefined\");\n          this.$message.error(\"未获取到有效的图表配置数据\");\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["echarts","chartOption","name","data","pagesList","tableData","pageNum","pageSize","total","form","backendData","myChart","user","JSON","parse","localStorage","getItem","mounted","chartDom","document","getElementById","init","setOption","created","load","methods","$request","get","params","then","res","genChart","undefined","console","log","error","$message"],"sources":["src/views/front/MyChart.vue"],"sourcesContent":["<template>\r\n    <div class=\"main-content\">\r\n\r\n        <div style=\"display: flex;margin-left: 40%;margin-top:20px;margin-right: 2%;\">\r\n            <div class=\"title\" style=\"width:40%;height: 50%;font-size:30px;background-color: #fff;border-radius: 20px;\">\r\n                <div style=\"margin-top: 20px;margin-bottom: 20px;margin-left: 100px;\">\r\n                    <strong>AI智能分析</strong>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        <el-row :gutter=\"10\">\r\n            <el-col shadow=\"hover\" :span=\"8\" v-for=\"item in pagesList\" :key=\"item.id\"\r\n                    style=\"margin-top:30px;margin-left: 4%;width:44%\">\r\n                <div class=\"text-title\"\r\n                     style=\"font-size:20px;margin:20px 2%;width: 100%;border: 12px solid red;height: 400px\">\r\n                    <strong>AI分析{{ item.name }}结论</strong>\r\n                    <div style=\"margin:20px 20px;word-wrap: break-word;font-size: 20px;\">{{ item.genResult }}</div>\r\n                </div>\r\n                <div class=\"table-title\" style=\"margin-left: 2%;width:100%;background-color:#fff;border-radius: 20px;\">\r\n                    <div class=\"box-title\" style=\"border-radius:3px;margin-left: 20px;font-size:20px;width: 95%;\">\r\n                        <strong>AI可视化图表</strong>\r\n                    </div>\r\n                    <div style=\"margin-left: 40px;margin-top: 20px; display: flex; grid-gap: 10px\">\r\n                        <div style=\"flex: 1\">\r\n                            <div style=\"height: 400px;font-size: 20px\" id=\"aiOption\">{{ item.genChart }}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </el-col>\r\n        </el-row>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\n\r\nlet chartOption = {};\r\n\r\n\r\nexport default {\r\n    name: \"Chart\",\r\n    data() {\r\n        return {\r\n            pagesList: [],\r\n            tableData: [],  // 所有的数据\r\n            pageNum: 1,   // 当前的页码\r\n            pageSize: 4,  // 每页显示的个数\r\n            total: 0,\r\n            form: {},\r\n            backendData: '',\r\n            myChart: '',\r\n            chartOption: {},  // 新增chartOption属性\r\n            user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n        }\r\n\r\n    },\r\n    mounted() {\r\n        let chartDom = document.getElementById(\"aiOption\");\r\n        this.myChart = echarts.init(chartDom);\r\n        this.myChart.setOption(chartOption)\r\n\r\n    },\r\n    created() {\r\n        this.load(1)\r\n    },\r\n    // methods：本页面所有的点击事件或者其他函数定义区\r\n    methods: {\r\n        load(pageNum) {\r\n            if (pageNum) this.pageNum = pageNum\r\n            this.$request.get('/chart/selectPage', {\r\n                params: {\r\n                    pageNum: this.pageNum,\r\n                    pageSize: this.pageSize,\r\n                }\r\n            }).then(res => {\r\n                this.chartOption = {};\r\n                if (res.data.genChart !== undefined) {\r\n                    try {\r\n                        this.chartOption = JSON.parse(res.data.genChart);\r\n                        console.log(\"this.chartOption=\", this.chartOption);\r\n                        this.myChart.setOption(this.chartOption); // 使用解析后的对象更新图表\r\n                    } catch (error) {\r\n                        console.error(\"解析chartOption时出错:\", error);\r\n                        this.$message.error(\"图表配置解析失败\");\r\n                    }\r\n                } else {\r\n                    console.error(\"genChart 数据为 undefined\");\r\n                    this.$message.error(\"未获取到有效的图表配置数据\");\r\n                }\r\n            })\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style>\r\nbody {\r\n    background-color: #dac9c9;\r\n}\r\n</style>"],"mappings":"AAuCA,YAAAA,OAAA;AAEA,IAAAC,WAAA;AAGA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,SAAA;MAAA;MACAC,OAAA;MAAA;MACAC,QAAA;MAAA;MACAC,KAAA;MACAC,IAAA;MACAC,WAAA;MACAC,OAAA;MACAV,WAAA;MAAA;MACAW,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;IACA;EAEA;EACAC,QAAA;IACA,IAAAC,QAAA,GAAAC,QAAA,CAAAC,cAAA;IACA,KAAAT,OAAA,GAAAX,OAAA,CAAAqB,IAAA,CAAAH,QAAA;IACA,KAAAP,OAAA,CAAAW,SAAA,CAAArB,WAAA;EAEA;EACAsB,QAAA;IACA,KAAAC,IAAA;EACA;EACA;EACAC,OAAA;IACAD,KAAAlB,OAAA;MACA,IAAAA,OAAA,OAAAA,OAAA,GAAAA,OAAA;MACA,KAAAoB,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAtB,OAAA,OAAAA,OAAA;UACAC,QAAA,OAAAA;QACA;MACA,GAAAsB,IAAA,CAAAC,GAAA;QACA,KAAA7B,WAAA;QACA,IAAA6B,GAAA,CAAA3B,IAAA,CAAA4B,QAAA,KAAAC,SAAA;UACA;YACA,KAAA/B,WAAA,GAAAY,IAAA,CAAAC,KAAA,CAAAgB,GAAA,CAAA3B,IAAA,CAAA4B,QAAA;YACAE,OAAA,CAAAC,GAAA,2BAAAjC,WAAA;YACA,KAAAU,OAAA,CAAAW,SAAA,MAAArB,WAAA;UACA,SAAAkC,KAAA;YACAF,OAAA,CAAAE,KAAA,sBAAAA,KAAA;YACA,KAAAC,QAAA,CAAAD,KAAA;UACA;QACA;UACAF,OAAA,CAAAE,KAAA;UACA,KAAAC,QAAA,CAAAD,KAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}