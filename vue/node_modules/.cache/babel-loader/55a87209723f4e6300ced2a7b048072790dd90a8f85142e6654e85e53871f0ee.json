{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport * as echarts from 'echarts';\nlet chartOption = {};\n// let chartOption={\n//     \"toolbox\": {\n//         \"show\": true,\n//         \"feature\": {\n//             \"dataView\": { \"show\": true, \"readOnly\": false },\n//             \"magicType\": { \"show\": true, \"type\": [\"pie\"] },\n//             \"restore\": { \"show\": true },\n//             \"saveAsImage\": { \"show\": true }\n//         }\n//     },\n//     \"series\": [\n//         {\n//             \"type\": \"pie\",\n//             \"data\": [\n//                 { \"name\": \"星期一\", \"value\": 2 },\n//                 { \"name\": \"星期二\", \"value\": 1 },\n//                 { \"name\": \"星期三\", \"value\": 0 },\n//                 { \"name\": \"星期四\", \"value\": 0 }\n//             ]\n//         }\n//     ]\n// }\n\nexport default {\n  name: \"Chart\",\n  data() {\n    return {\n      fromVisible: false,\n      form: {},\n      backendData: '',\n      questionGoalNameType: [],\n      mychart: '',\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        goal: [{\n          required: true,\n          message: '请输入分析目标',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '请输入问卷名称',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择图表类型',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted() {\n    let chartDom = document.getElementById(\"aiOption\");\n    this.myChart = echarts.init(chartDom);\n    this.myChart.setOption(chartOption);\n  },\n  // methods：本页面所有的点击事件或者其他函数定义区\n  methods: {\n    getData(pageId) {\n      this.$request.get('/pageCount', {\n        params: {\n          pageId: pageId\n        }\n      }).then(res => {\n        this.pageCount = res.data || {};\n        this.$request.post('/chart/gen', {\n          answerCount: this.pageCount,\n          questionGoalNameType: this.questionGoalNameType\n        }).then(res => {\n          if (res.code === '200') {\n            this.$message.success(\"提交成功！AI正在分析中...\");\n            this.backendData = res.data[1];\n            // res.data[0]是一个JSON字符串，需要将其解析为对象\n            try {\n              this.chartOption = JSON.parse(res.data[0]);\n              this.myChart.setOption(this.chartOption); // 使用解析后的对象更新图表\n            } catch (error) {\n              console.error(\"解析chartOption时出错:\", error);\n              this.$message.error(\"图表配置解析失败\");\n            }\n          } else {\n            this.$message.error(res.msg);\n          }\n        });\n      }).catch(error => {\n        console.error(\"请求出错:\", error);\n        this.$message.error(\"请求失败\");\n      });\n    },\n    getPageChart() {\n      if (this.form.type != null && this.form.goal != null && this.form.name != null) {\n        this.questionGoalNameType = [this.form.goal, this.form.name, this.form.type];\n        // 获取当前页面的 URL 参数部分\n        const urlParams = new URLSearchParams(window.location.search);\n        // 获取特定参数的值，比如 pageId\n        let pageId = urlParams.get('pageId');\n        this.getData(pageId);\n      } else {\n        this.$message.error(\"参数有误\");\n      }\n      console.log(\"---------------\");\n      console.log(this.form.goal);\n      console.log(this.form.name);\n      console.log(this.form.type);\n      console.log(\"--------------\");\n    },\n    reset() {\n      this.form.goal = null;\n      this.form.name = null;\n      this.form.type = null;\n    }\n  }\n};","map":{"version":3,"names":["echarts","chartOption","name","data","fromVisible","form","backendData","questionGoalNameType","mychart","user","JSON","parse","localStorage","getItem","rules","goal","required","message","trigger","type","mounted","chartDom","document","getElementById","myChart","init","setOption","methods","getData","pageId","$request","get","params","then","res","pageCount","post","answerCount","code","$message","success","error","console","msg","catch","getPageChart","urlParams","URLSearchParams","window","location","search","log","reset"],"sources":["src/views/front/ChartForTable.vue"],"sourcesContent":["<template>\r\n    <div class=\"main-content\">\r\n\r\n        <div class=\"big-box\"\r\n             style=\"padding-bottom:10px;border-radius:20px;height:50%;width: 32%;margin: 30px 3%;background-color:#fff;\">\r\n            <div class=\"box-title\" style=\"border-radius:3px;font-size:25px;margin:0px 32%;padding:21px;width: 58.3%\">\r\n                <strong>AI智能分析</strong>\r\n            </div>\r\n            <el-form ref=\"form\" :model=\"form\" label-width=\"80px\" style=\"margin-left: 10px;margin-right: 20px\"\r\n                     :rules=\"rules\">\r\n                <el-form-item label=\"分析目标\" prop=\"goal\">\r\n                    <el-input placeholder=\"请输入需要分析的内容\" v-model=\"form.goal\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"问卷名称\" prop=\"name\">\r\n                    <el-input placeholder=\"请输入问卷名称\" v-model=\"form.name\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"图表类型\" prop=\"type\">\r\n                    <el-select v-model=\"form.type\" placeholder=\"请选择图表类型\">\r\n                        <el-option value=\"柱形图\" label=\"柱形图\"></el-option>\r\n                        <el-option value=\"折线图\" label=\"折线图\"></el-option>\r\n                        <el-option value=\"饼图\" label=\"饼图\"></el-option>\r\n                        <el-option value=\"散点图\" label=\"散点图\"></el-option>\r\n                        <el-option value=\"雷达图\" label=\"雷达图\"></el-option>\r\n                        <el-option value=\"K线图\" label=\"K线图\"></el-option>\r\n                        <el-option value=\"盒须图\" label=\"盒须图\"></el-option>\r\n                        <el-option value=\"旭日图\" label=\"旭日图\"></el-option>\r\n                    </el-select>\r\n                </el-form-item>\r\n                <el-form-item>\r\n                    <el-button style=\" background-color: #333; border-color: #333; color: white\" type=\"primary\"\r\n                               @click=\"getPageChart\">提 交\r\n                    </el-button>\r\n                    <el-button style=\" background-color: #333; border-color: #333; color: white\" @click=\"reset\">重 置\r\n                    </el-button>\r\n                </el-form-item>\r\n\r\n\r\n            </el-form>\r\n            <div class=\"box-title\" style=\"border-radius:3px;font-size:20px;margin-left:20px;padding:21px;width: 95%\">\r\n                <strong>AI分析结论</strong>\r\n                <div>{{ backendData }}</div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"big-box\" style=\"padding-bottom:10px;border-radius:20px;height:80%;width: 63%;margin-left: 36%;margin-top:-25.2%;background-color:#fff;\">\r\n            <div class=\"box-title\" style=\"border-radius:3px;font-size:25px;margin-left:10px;padding:11px;width: 98.3%;\">\r\n                <strong>AI可视化图表</strong>\r\n                <div style=\"margin-left: 40px;margin-top: 80px; display: flex; grid-gap: 10px\">\r\n                    <div style=\"flex: 1\">\r\n                        <div style=\"height: 400px\" id=\"aiOption\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nlet chartOption={};\r\n// let chartOption={\r\n//     \"toolbox\": {\r\n//         \"show\": true,\r\n//         \"feature\": {\r\n//             \"dataView\": { \"show\": true, \"readOnly\": false },\r\n//             \"magicType\": { \"show\": true, \"type\": [\"pie\"] },\r\n//             \"restore\": { \"show\": true },\r\n//             \"saveAsImage\": { \"show\": true }\r\n//         }\r\n//     },\r\n//     \"series\": [\r\n//         {\r\n//             \"type\": \"pie\",\r\n//             \"data\": [\r\n//                 { \"name\": \"星期一\", \"value\": 2 },\r\n//                 { \"name\": \"星期二\", \"value\": 1 },\r\n//                 { \"name\": \"星期三\", \"value\": 0 },\r\n//                 { \"name\": \"星期四\", \"value\": 0 }\r\n//             ]\r\n//         }\r\n//     ]\r\n// }\r\n\r\n\r\nexport default {\r\n    name: \"Chart\",\r\n    data() {\r\n        return {\r\n            fromVisible: false,\r\n            form: {},\r\n            backendData: '',\r\n            questionGoalNameType: [],\r\n            mychart: '',\r\n            user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n            rules: {\r\n                goal: [\r\n                    {required: true, message: '请输入分析目标', trigger: 'blur'},\r\n                ],\r\n                name: [\r\n                    {required: true, message: '请输入问卷名称', trigger: 'blur'},\r\n                ],\r\n                type: [\r\n                    {required: true, message: '请选择图表类型', trigger: 'blur'},\r\n                ],\r\n            },\r\n        }\r\n    },\r\n    mounted() {\r\n        let chartDom = document.getElementById(\"aiOption\");\r\n        this.myChart = echarts.init(chartDom);\r\n        this.myChart.setOption(chartOption)\r\n\r\n    },\r\n    // methods：本页面所有的点击事件或者其他函数定义区\r\n    methods: {\r\n        getData(pageId) {\r\n            this.$request.get('/pageCount', {\r\n                params: {\r\n                    pageId: pageId\r\n                }\r\n            }).then(res => {\r\n                this.pageCount = res.data || {};\r\n                this.$request.post('/chart/gen', {\r\n                    answerCount: this.pageCount,\r\n                    questionGoalNameType: this.questionGoalNameType\r\n                }).then(res => {\r\n                    if (res.code === '200') {\r\n                        this.$message.success(\"提交成功！AI正在分析中...\");\r\n                        this.backendData = res.data[1];\r\n                        // res.data[0]是一个JSON字符串，需要将其解析为对象\r\n                        try {\r\n                            this.chartOption = JSON.parse(res.data[0]);\r\n                            this.myChart.setOption(this.chartOption); // 使用解析后的对象更新图表\r\n                        } catch (error) {\r\n                            console.error(\"解析chartOption时出错:\", error);\r\n                            this.$message.error(\"图表配置解析失败\");\r\n                        }\r\n                    } else {\r\n                        this.$message.error(res.msg);\r\n                    }\r\n                });\r\n            }).catch(error => {\r\n                console.error(\"请求出错:\", error);\r\n                this.$message.error(\"请求失败\");\r\n            });\r\n        },\r\n\r\n        getPageChart() {\r\n            if(this.form.type != null && this.form.goal != null&& this.form.name != null){\r\n                this.questionGoalNameType = [this.form.goal, this.form.name, this.form.type]\r\n                // 获取当前页面的 URL 参数部分\r\n                const urlParams = new URLSearchParams(window.location.search);\r\n                // 获取特定参数的值，比如 pageId\r\n                let pageId = urlParams.get('pageId');\r\n                this.getData(pageId)\r\n            }else{\r\n                this.$message.error(\"参数有误\")\r\n\r\n            }\r\n            console.log(\"---------------\")\r\n            console.log(this.form.goal)\r\n            console.log(this.form.name)\r\n            console.log(this.form.type)\r\n            console.log(\"--------------\")\r\n\r\n        },\r\n        reset() {\r\n            this.form.goal = null\r\n            this.form.name = null\r\n            this.form.type = null\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\nbody {\r\n    background-color: #dac9c9;\r\n}\r\n</style>"],"mappings":";;;AA4DA,YAAAA,OAAA;AACA,IAAAC,WAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,IAAA;MACAC,WAAA;MACAC,oBAAA;MACAC,OAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,KAAA;QACAC,IAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAhB,IAAA,GACA;UAAAc,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAC,IAAA,GACA;UAAAH,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAE,QAAA;IACA,IAAAC,QAAA,GAAAC,QAAA,CAAAC,cAAA;IACA,KAAAC,OAAA,GAAAxB,OAAA,CAAAyB,IAAA,CAAAJ,QAAA;IACA,KAAAG,OAAA,CAAAE,SAAA,CAAAzB,WAAA;EAEA;EACA;EACA0B,OAAA;IACAC,QAAAC,MAAA;MACA,KAAAC,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAH,MAAA,EAAAA;QACA;MACA,GAAAI,IAAA,CAAAC,GAAA;QACA,KAAAC,SAAA,GAAAD,GAAA,CAAA/B,IAAA;QACA,KAAA2B,QAAA,CAAAM,IAAA;UACAC,WAAA,OAAAF,SAAA;UACA5B,oBAAA,OAAAA;QACA,GAAA0B,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAI,IAAA;YACA,KAAAC,QAAA,CAAAC,OAAA;YACA,KAAAlC,WAAA,GAAA4B,GAAA,CAAA/B,IAAA;YACA;YACA;cACA,KAAAF,WAAA,GAAAS,IAAA,CAAAC,KAAA,CAAAuB,GAAA,CAAA/B,IAAA;cACA,KAAAqB,OAAA,CAAAE,SAAA,MAAAzB,WAAA;YACA,SAAAwC,KAAA;cACAC,OAAA,CAAAD,KAAA,sBAAAA,KAAA;cACA,KAAAF,QAAA,CAAAE,KAAA;YACA;UACA;YACA,KAAAF,QAAA,CAAAE,KAAA,CAAAP,GAAA,CAAAS,GAAA;UACA;QACA;MACA,GAAAC,KAAA,CAAAH,KAAA;QACAC,OAAA,CAAAD,KAAA,UAAAA,KAAA;QACA,KAAAF,QAAA,CAAAE,KAAA;MACA;IACA;IAEAI,aAAA;MACA,SAAAxC,IAAA,CAAAc,IAAA,iBAAAd,IAAA,CAAAU,IAAA,iBAAAV,IAAA,CAAAH,IAAA;QACA,KAAAK,oBAAA,SAAAF,IAAA,CAAAU,IAAA,OAAAV,IAAA,CAAAH,IAAA,OAAAG,IAAA,CAAAc,IAAA;QACA;QACA,MAAA2B,SAAA,OAAAC,eAAA,CAAAC,MAAA,CAAAC,QAAA,CAAAC,MAAA;QACA;QACA,IAAArB,MAAA,GAAAiB,SAAA,CAAAf,GAAA;QACA,KAAAH,OAAA,CAAAC,MAAA;MACA;QACA,KAAAU,QAAA,CAAAE,KAAA;MAEA;MACAC,OAAA,CAAAS,GAAA;MACAT,OAAA,CAAAS,GAAA,MAAA9C,IAAA,CAAAU,IAAA;MACA2B,OAAA,CAAAS,GAAA,MAAA9C,IAAA,CAAAH,IAAA;MACAwC,OAAA,CAAAS,GAAA,MAAA9C,IAAA,CAAAc,IAAA;MACAuB,OAAA,CAAAS,GAAA;IAEA;IACAC,MAAA;MACA,KAAA/C,IAAA,CAAAU,IAAA;MACA,KAAAV,IAAA,CAAAH,IAAA;MACA,KAAAG,IAAA,CAAAc,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}