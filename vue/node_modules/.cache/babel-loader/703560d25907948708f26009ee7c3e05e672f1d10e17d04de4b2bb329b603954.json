{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  name: \"Chart\",\n  data() {\n    return {\n      fromVisible: false,\n      chartType: null,\n      chartQuention: null,\n      chartGoal: null,\n      count: null,\n      // form: {},\n      questionGoal: null,\n      questionName: null,\n      questionType: null,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        goal: [{\n          required: true,\n          message: '请输入分析目标',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '请输入问卷名称',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择图表类型',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted() {\n    this.load();\n  },\n  // methods：本页面所有的点击事件或者其他函数定义区\n  methods: {\n    getData(pageId) {\n      this.$request.get('/pageCount', {\n        params: {\n          pageId: pageId\n        }\n      }).then(res => {\n        this.pageCount = res.data || {};\n        console.log(this.pageCount);\n        console.log(typeof this.pageCount);\n        let count = this.pageCount.answerCount;\n        console.log(this.pageCount.answerCount);\n\n        //答题人数\n        this.$request.get('/chart/gen', {\n          params: {\n            answerCount: count\n          }\n        }).then(res => {\n          if (res.code === '200') {\n            this.$message.success(\"提交成功！AI正在分析中...\");\n            this.load(1);\n          } else {\n            this.$message.error(res.msg);\n          }\n        });\n      });\n    },\n    getPageChart() {\n      // 获取当前页面的 URL 参数部分\n      const urlParams = new URLSearchParams(window.location.search);\n      // 获取特定参数的值，比如 pageId\n      let pageId = urlParams.get('pageId');\n      console.log(pageId);\n      this.getData(pageId);\n    },\n    reset() {\n      this.chartType = null;\n      this.chartQuention = null;\n      this.chartGoal = null;\n      this.load(1);\n    },\n    load() {}\n  }\n};","map":{"version":3,"names":["name","data","fromVisible","chartType","chartQuention","chartGoal","count","questionGoal","questionName","questionType","form","user","JSON","parse","localStorage","getItem","rules","goal","required","message","trigger","type","mounted","load","methods","getData","pageId","$request","get","params","then","res","pageCount","console","log","answerCount","code","$message","success","error","msg","getPageChart","urlParams","URLSearchParams","window","location","search","reset"],"sources":["src/views/front/Chart.vue"],"sourcesContent":["<template>\r\n    <div class=\"main-content\">\r\n\r\n        <div class=\"big-box\" style=\"padding-bottom:10px;border-radius:20px;height:50%;width: 32%;margin: 30px 15%;background-color:#fff;\">\r\n            <div class=\"box-title\" style=\"border-radius:3px;font-size:25px;margin:0px 32%;padding:21px;width: 58.3%\">\r\n                <strong>AI智能分析</strong>\r\n            </div>\r\n            <el-form ref=\"form\" :model=\"form\" label-width=\"80px\" style=\"margin-left: 10px;margin-right: 20px\" :rules=\"rules\">\r\n                <el-form-item label=\"分析目标\" prop=\"goal\">\r\n                    <el-input placeholder=\"请输入需要分析的内容\" v-model=\"form.goal\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"问卷名称\" prop=\"name\">\r\n                    <el-input placeholder=\"请输入问卷名称\" v-model=\"form.name\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"图表类型\" prop=\"type\">\r\n                    <el-select v-model=\"form.region\" placeholder=\"请选择图表类型\">\r\n                        <el-option value=\"柱形图\" label=\"柱形图\"></el-option>\r\n                        <el-option value=\"折线图\" label=\"折线图\"></el-option>\r\n                        <el-option value=\"饼图\" label=\"饼图\"></el-option>\r\n                        <el-option value=\"散点图\" label=\"散点图\"></el-option>\r\n                        <el-option value=\"雷达图\" label=\"雷达图\"></el-option>\r\n\r\n                    </el-select>\r\n                </el-form-item>\r\n                <el-form-item>\r\n                    <el-button style=\" background-color: #333; border-color: #333; color: white\" type=\"primary\" @click=\"getPageChart\">提 交</el-button>\r\n                    <el-button style=\" background-color: #333; border-color: #333; color: white\">重 置</el-button>\r\n                </el-form-item>\r\n\r\n\r\n            </el-form>\r\n\r\n<!--            <div>-->\r\n<!--                <div class=\"box-title\" style=\"border-radius:3px;font-size:25px;margin-left:20px;padding:21px;width: 58.3%\">-->\r\n<!--                    <strong>AI分析结论</strong>-->\r\n<!--                    <el-form-item label=\"分析结论\">-->\r\n<!--                        <el-input type=\"textarea\" v-model=\"form.desc\"></el-input>-->\r\n<!--                    </el-form-item>-->\r\n<!--                </div>-->\r\n\r\n<!--                <div class=\"box-title\" style=\"border-radius:3px;font-size:25px;margin-left:20px;padding:21px;width: 58.3%\">-->\r\n<!--                    <strong>AI可视化图表</strong>-->\r\n<!--                </div>-->\r\n<!--            </div>-->\r\n\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nexport default {\r\n    name: \"Chart\",\r\n    data() {\r\n        return {\r\n            fromVisible: false,\r\n            chartType:null,\r\n            chartQuention:null,\r\n            chartGoal:null,\r\n            count: null,\r\n            // form: {},\r\n            questionGoal: null,\r\n            questionName: null,\r\n            questionType: null,\r\n            form: {},\r\n            user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n            rules: {\r\n                goal: [\r\n                    {required: true, message: '请输入分析目标', trigger: 'blur'},\r\n                ],\r\n                name: [\r\n                    {required: true, message: '请输入问卷名称', trigger: 'blur'},\r\n                ],\r\n                type: [\r\n                    {required: true, message: '请选择图表类型', trigger: 'blur'},\r\n                ],\r\n            },\r\n        }\r\n    },\r\n    mounted() {\r\n        this.load()\r\n    },\r\n    // methods：本页面所有的点击事件或者其他函数定义区\r\n    methods: {\r\n        getData(pageId){\r\n            this.$request.get('/pageCount', {\r\n                params: {\r\n                    pageId: pageId\r\n                }\r\n            }).then(res => {\r\n                this.pageCount = res.data || {}\r\n                console.log(this.pageCount)\r\n                console.log(typeof this.pageCount)\r\n                let count=this.pageCount.answerCount;\r\n                console.log(this.pageCount.answerCount)\r\n\r\n                //答题人数\r\n                this.$request.get('/chart/gen',{\r\n                    params: {\r\n                        answerCount: count,\r\n\r\n                    }\r\n                }).then(res => {\r\n                    if (res.code === '200') {\r\n                        this.$message.success(\"提交成功！AI正在分析中...\")\r\n                        this.load(1)\r\n\r\n                    } else {\r\n                        this.$message.error(res.msg)\r\n                    }\r\n                })\r\n            })\r\n        },\r\n        getPageChart() {\r\n            // 获取当前页面的 URL 参数部分\r\n            const urlParams = new URLSearchParams(window.location.search);\r\n            // 获取特定参数的值，比如 pageId\r\n            let pageId = urlParams.get('pageId');\r\n            console.log(pageId);\r\n            this.getData(pageId)\r\n        },\r\n        reset() {\r\n            this.chartType = null\r\n            this.chartQuention = null\r\n            this.chartGoal = null\r\n            this.load(1)\r\n        },\r\n        load() {\r\n\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\nbody {\r\n    background-color: #dac9c9;\r\n}\r\n</style>"],"mappings":";;;AAqDA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,SAAA;MACAC,aAAA;MACAC,SAAA;MACAC,KAAA;MACA;MACAC,YAAA;MACAC,YAAA;MACAC,YAAA;MACAC,IAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,KAAA;QACAC,IAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACApB,IAAA,GACA;UAAAkB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAC,IAAA,GACA;UAAAH,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAE,QAAA;IACA,KAAAC,IAAA;EACA;EACA;EACAC,OAAA;IACAC,QAAAC,MAAA;MACA,KAAAC,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAH,MAAA,EAAAA;QACA;MACA,GAAAI,IAAA,CAAAC,GAAA;QACA,KAAAC,SAAA,GAAAD,GAAA,CAAA9B,IAAA;QACAgC,OAAA,CAAAC,GAAA,MAAAF,SAAA;QACAC,OAAA,CAAAC,GAAA,aAAAF,SAAA;QACA,IAAA1B,KAAA,QAAA0B,SAAA,CAAAG,WAAA;QACAF,OAAA,CAAAC,GAAA,MAAAF,SAAA,CAAAG,WAAA;;QAEA;QACA,KAAAR,QAAA,CAAAC,GAAA;UACAC,MAAA;YACAM,WAAA,EAAA7B;UAEA;QACA,GAAAwB,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAK,IAAA;YACA,KAAAC,QAAA,CAAAC,OAAA;YACA,KAAAf,IAAA;UAEA;YACA,KAAAc,QAAA,CAAAE,KAAA,CAAAR,GAAA,CAAAS,GAAA;UACA;QACA;MACA;IACA;IACAC,aAAA;MACA;MACA,MAAAC,SAAA,OAAAC,eAAA,CAAAC,MAAA,CAAAC,QAAA,CAAAC,MAAA;MACA;MACA,IAAApB,MAAA,GAAAgB,SAAA,CAAAd,GAAA;MACAK,OAAA,CAAAC,GAAA,CAAAR,MAAA;MACA,KAAAD,OAAA,CAAAC,MAAA;IACA;IACAqB,MAAA;MACA,KAAA5C,SAAA;MACA,KAAAC,aAAA;MACA,KAAAC,SAAA;MACA,KAAAkB,IAAA;IACA;IACAA,KAAA,GAEA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}