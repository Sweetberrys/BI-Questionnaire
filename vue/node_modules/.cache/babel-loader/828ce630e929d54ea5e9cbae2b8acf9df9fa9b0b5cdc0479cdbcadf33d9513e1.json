{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: \"MyChart2.0\",\n  data() {\n    return {\n      pagesList: [],\n      tableData: [],\n      pageNum: 1,\n      pageSize: 2,\n      total: 0,\n      form: {},\n      backendData: '',\n      myChart: null,\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}')\n    };\n  },\n  mounted() {\n    this.load(1);\n    this.$nextTick(() => {\n      setTimeout(() => {\n        // You can adjust the delay as needed\n        if (this.$refs.aiOption && this.$refs.aiOption.length > 0) {\n          this.myChart = echarts.init(this.$refs.aiOption[0]);\n        } else {\n          console.error('无法找到 aiOption 元素');\n        }\n      }, 1000); // Adjust the delay as needed\n    });\n  },\n\n  methods: {\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n    },\n    load(pageNum) {\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/chart/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n        this.pagesList = this.tableData;\n        try {\n          if (this.tableData[0]?.genChart) {\n            const genChart = JSON.parse(this.tableData[0].genChart);\n            if (this.myChart) {\n              this.myChart.setOption(genChart);\n            } else {\n              console.error(\"myChart 未初始化\");\n            }\n          } else {\n            console.error(\"genChart 为空或不存在\");\n            this.$message.error(\"图表配置为空或不存在\");\n          }\n        } catch (error) {\n          console.error(\"解析genChart时出错:\", error);\n          this.$message.error(\"图表配置解析失败\");\n        }\n      });\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","pagesList","tableData","pageNum","pageSize","total","form","backendData","myChart","user","JSON","parse","localStorage","getItem","mounted","load","$nextTick","setTimeout","$refs","aiOption","length","init","console","error","methods","formatTime","timestamp","date","Date","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","$request","get","params","then","res","list","genChart","setOption","$message","handleCurrentChange"],"sources":["src/views/front/MyChart2.0.vue"],"sourcesContent":["<template>\r\n    <div class=\"main-content\">\r\n\r\n        <div style=\"display: flex; margin-left: 40%; margin-top: 20px; margin-right: 2%;\">\r\n            <div class=\"title\" style=\"width: 40%; height: 50%; font-size: 30px; background-color: #fff; border-radius: 20px;\">\r\n                <div style=\"margin-top: 20px; margin-bottom: 20px; margin-left: 100px;\">\r\n                    <strong>AI智能分析</strong>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <el-row :gutter=\"10\">\r\n            <el-col shadow=\"hover\" :span=\"8\" v-for=\"item in pagesList\" :key=\"item.id\"\r\n                    style=\"margin-top: 30px; margin-left: 4%; width: 44%\">\r\n                <div class=\"text-title\" style=\"font-size: 20px; margin: 20px 2%; width: 100%; background-color: #fff; border-radius: 20px;\">\r\n\r\n                    <div style=\"margin-left: 20px;\">\r\n                        <strong style=\"margin-top: 20px;\">AI分析{{ item.name }}目标：《{{ item.goal }}》</strong><br/>\r\n                        <el-divider></el-divider>\r\n\r\n                        <strong style=\"\">AI分析{{ item.name }}时间：{{ formatTime(item.createTime) }}</strong><br/>\r\n                        <el-divider></el-divider>\r\n\r\n                        <strong style=\"\">AI分析{{ item.name }}结论</strong>\r\n                    </div>\r\n\r\n                    <div style=\"margin: 20px 20px; word-wrap: break-word; font-size: 20px;\">{{ item.genResult }}</div>\r\n                </div>\r\n\r\n                <div class=\"table-title\" style=\"margin-left: 2%; width: 100%; background-color: #fff; border-radius: 20px;\">\r\n                    <div class=\"box-title\" style=\"border-radius: 3px; margin-left: 20px; font-size: 20px; width: 95%;\">\r\n                        <strong>AI可视化图表</strong>\r\n                    </div>\r\n                    <div style=\"margin-left: 40px; margin-top: 20px; display: flex; grid-gap: 10px\">\r\n                        <div style=\"flex: 1\">\r\n                            <div ref=\"aiOption\" style=\"height: 400px; font-size: 20px;\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </el-col>\r\n        </el-row>\r\n\r\n        <div style=\"margin-left: 15%; color: white\">\r\n            <el-pagination\r\n                :background=\"true\"\r\n                @current-change=\"handleCurrentChange\"\r\n                :current-page=\"pageNum\"\r\n                :page-sizes=\"[5, 10, 20]\"\r\n                :page-size=\"pageSize\"\r\n                layout=\"total, prev, pager, next\"\r\n                :total=\"total\"\r\n            >\r\n            </el-pagination>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n    name: \"MyChart2.0\",\r\n    data() {\r\n        return {\r\n            pagesList: [],\r\n            tableData: [],\r\n            pageNum: 1,\r\n            pageSize: 2,\r\n            total: 0,\r\n            form: {},\r\n            backendData: '',\r\n            myChart: null,\r\n            user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n        }\r\n    },\r\n    mounted() {\r\n        this.load(1);\r\n        this.$nextTick(() => {\r\n            setTimeout(() => { // You can adjust the delay as needed\r\n                if (this.$refs.aiOption && this.$refs.aiOption.length > 0) {\r\n                    this.myChart = echarts.init(this.$refs.aiOption[0]);\r\n                } else {\r\n                    console.error('无法找到 aiOption 元素');\r\n                }\r\n            }, 1000); // Adjust the delay as needed\r\n        });\r\n    },\r\n    methods: {\r\n        formatTime(timestamp) {\r\n            const date = new Date(timestamp);\r\n            return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\r\n        },\r\n        load(pageNum) {\r\n            if (pageNum) this.pageNum = pageNum;\r\n            this.$request.get('/chart/selectPage', {\r\n                params: {\r\n                    pageNum: this.pageNum,\r\n                    pageSize: this.pageSize,\r\n                }\r\n            }).then(res => {\r\n                this.tableData = res.data?.list;\r\n                this.total = res.data?.total;\r\n                this.pagesList = this.tableData;\r\n                try {\r\n                    if (this.tableData[0]?.genChart) {\r\n                        const genChart = JSON.parse(this.tableData[0].genChart);\r\n                        if (this.myChart) {\r\n                            this.myChart.setOption(genChart);\r\n                        } else {\r\n                            console.error(\"myChart 未初始化\");\r\n                        }\r\n                    } else {\r\n                        console.error(\"genChart 为空或不存在\");\r\n                        this.$message.error(\"图表配置为空或不存在\");\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"解析genChart时出错:\", error);\r\n                    this.$message.error(\"图表配置解析失败\");\r\n                }\r\n            });\r\n        },\r\n        handleCurrentChange(pageNum) {\r\n            this.load(pageNum)\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style>\r\nbody {\r\n    background-color: #dac9c9;\r\n}\r\n</style>\r\n"],"mappings":"AA0DA,YAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,SAAA;MACAC,OAAA;MACAC,QAAA;MACAC,KAAA;MACAC,IAAA;MACAC,WAAA;MACAC,OAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,IAAA;IACA,KAAAC,SAAA;MACAC,UAAA;QAAA;QACA,SAAAC,KAAA,CAAAC,QAAA,SAAAD,KAAA,CAAAC,QAAA,CAAAC,MAAA;UACA,KAAAZ,OAAA,GAAAV,OAAA,CAAAuB,IAAA,MAAAH,KAAA,CAAAC,QAAA;QACA;UACAG,OAAA,CAAAC,KAAA;QACA;MACA;IACA;EACA;;EACAC,OAAA;IACAC,WAAAC,SAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,SAAA;MACA,UAAAC,IAAA,CAAAE,WAAA,OAAAF,IAAA,CAAAG,QAAA,QAAAC,QAAA,GAAAC,QAAA,YAAAL,IAAA,CAAAM,OAAA,GAAAF,QAAA,GAAAC,QAAA,YAAAL,IAAA,CAAAO,QAAA,GAAAH,QAAA,GAAAC,QAAA,YAAAL,IAAA,CAAAQ,UAAA,GAAAJ,QAAA,GAAAC,QAAA;IACA;IACAjB,KAAAZ,OAAA;MACA,IAAAA,OAAA,OAAAA,OAAA,GAAAA,OAAA;MACA,KAAAiC,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAnC,OAAA,OAAAA,OAAA;UACAC,QAAA,OAAAA;QACA;MACA,GAAAmC,IAAA,CAAAC,GAAA;QACA,KAAAtC,SAAA,GAAAsC,GAAA,CAAAxC,IAAA,EAAAyC,IAAA;QACA,KAAApC,KAAA,GAAAmC,GAAA,CAAAxC,IAAA,EAAAK,KAAA;QACA,KAAAJ,SAAA,QAAAC,SAAA;QACA;UACA,SAAAA,SAAA,KAAAwC,QAAA;YACA,MAAAA,QAAA,GAAAhC,IAAA,CAAAC,KAAA,MAAAT,SAAA,IAAAwC,QAAA;YACA,SAAAlC,OAAA;cACA,KAAAA,OAAA,CAAAmC,SAAA,CAAAD,QAAA;YACA;cACApB,OAAA,CAAAC,KAAA;YACA;UACA;YACAD,OAAA,CAAAC,KAAA;YACA,KAAAqB,QAAA,CAAArB,KAAA;UACA;QACA,SAAAA,KAAA;UACAD,OAAA,CAAAC,KAAA,mBAAAA,KAAA;UACA,KAAAqB,QAAA,CAAArB,KAAA;QACA;MACA;IACA;IACAsB,oBAAA1C,OAAA;MACA,KAAAY,IAAA,CAAAZ,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}