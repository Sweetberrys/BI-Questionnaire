{"ast":null,"code":"export default {\n  name: \"AdminPerson\",\n  data() {\n    const validatePassword = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请确认密码'));\n      } else if (value !== this.user.newPassword) {\n        callback(new Error('确认密码错误'));\n      } else {\n        callback();\n      }\n    };\n    const validateNewPassword = (rule, value, callback) => {\n      if (value.length > 6 || value.length < 8) {\n        callback(new Error('新密码长度需在6-8个字符之间'));\n      } else {\n        callback();\n      }\n    };\n    const validateName = (rule, name, callback) => {\n      if (name.length < 6 || name.length > 8) {\n        callback(new Error('用户名长度需在6-8个字符之间'));\n      } else if (!/^[a-zA-Z0-9]+$/.test(name)) {\n        // 然后使用正则表达式检查用户名是否只包含字母和数字\n        callback(new Error('用户名中不能包含特殊符号,.!！@#$%^&*()！。？/、+='));\n      } else {\n        callback(); // 如果以上两个条件都满足，则调用callback()表示验证通过\n      }\n    };\n\n    const validatePhone = (rule, phone, callback) => {\n      if (!/^1[34578]\\d{9}$/.test(phone)) {\n        callback(new Error('手机号格式不正确'));\n      } else {\n        callback(); // 如果以上两个条件都满足，则调用callback()表示验证通过\n      }\n    };\n\n    const validateEmail = (rule, email, callback) => {\n      if (!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)) {\n        callback(new Error('邮箱格式不正确'));\n      } else {\n        callback(); // 如果以上两个条件都满足，则调用callback()表示验证通过\n      }\n    };\n\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      dialogVisible: false,\n      rules: {\n        password: [{\n          required: true,\n          message: '请输入原始密码',\n          trigger: 'blur'\n        }],\n        newPassword: [{\n          required: true,\n          message: '请输入新密码',\n          trigger: 'blur'\n        }, {\n          validator: validateNewPassword,\n          required: true,\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          validator: validatePassword,\n          required: true,\n          trigger: 'blur'\n        }],\n        name: [{\n          validator: validateName,\n          trigger: 'blur'\n        }],\n        phone: [{\n          validator: validatePhone,\n          trigger: 'blur'\n        }],\n        email: [{\n          validator: validateEmail,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {},\n  methods: {\n    update() {\n      this.$refs['formRef'].validate(valid => {\n        if (valid) {\n          // 保存当前的用户信息到数据库\n          this.$request.put('/admin/update', this.user).then(res => {\n            if (res.code === '200') {\n              // 成功更新\n              this.$message.success('保存成功');\n\n              // 更新浏览器缓存里的用户信息\n              localStorage.setItem('xm-user', JSON.stringify(this.user));\n\n              // 触发父级的数据更新\n              this.$emit('update:user');\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        }\n      });\n    },\n    handleAvatarSuccess(response, file, fileList) {\n      // 把user的头像属性换成上传的图片的链接\n      this.$set(this.user, 'avatar', response.data);\n    }\n  }\n};","map":{"version":3,"names":["name","data","validatePassword","rule","value","callback","Error","user","newPassword","validateNewPassword","length","validateName","test","validatePhone","phone","validateEmail","email","JSON","parse","localStorage","getItem","dialogVisible","rules","password","required","message","trigger","validator","confirmPassword","created","methods","update","$refs","validate","valid","$request","put","then","res","code","$message","success","setItem","stringify","$emit","error","msg","handleAvatarSuccess","response","file","fileList","$set"],"sources":["src/views/manager/AdminPerson.vue"],"sourcesContent":["<template>\r\n  <div style=\"height: 100%;margin:0px auto;background-image: url('@assets/imgs/model_bg.jpg');\">\r\n    <el-card style=\"width: 60%;height: 100%;\">\r\n        <el-form :model=\"user\" :rules=\"rules\" label-width=\"100px\" style=\"padding-right: 50px\" ref=\"userForm\">\r\n        <div style=\"margin: 45px; text-align: center\">\r\n          <el-upload\r\n              class=\"avatar-uploader\"\r\n              :action=\"$baseUrl + '/files/upload'\"\r\n              :show-file-list=\"false\"\r\n              :on-success=\"handleAvatarSuccess\"\r\n          >\r\n            <img v-if=\"user.avatar\" :src=\"user.avatar\" class=\"avatar\" />\r\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n          </el-upload>\r\n        </div>\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"user.username\" placeholder=\"用户名\" disabled></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"姓名\" prop=\"name\">\r\n          <el-input v-model=\"user.name\" placeholder=\"姓名\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"电话\" prop=\"phone\">\r\n          <el-input v-model=\"user.phone\" placeholder=\"电话\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"邮箱\" prop=\"email\">\r\n          <el-input v-model=\"user.email\" placeholder=\"邮箱\"></el-input>\r\n        </el-form-item>\r\n        <div style=\"text-align: center; margin-bottom: 20px\">\r\n          <el-button type=\"primary\" @click=\"update\">保 存</el-button>\r\n        </div>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"AdminPerson\",\r\n  data() {\r\n      const validatePassword = (rule, value, callback) => {\r\n          if (value === '') {\r\n              callback(new Error('请确认密码'))\r\n          } else if (value !== this.user.newPassword) {\r\n              callback(new Error('确认密码错误'))\r\n          } else {\r\n              callback()\r\n          }\r\n      }\r\n      const validateNewPassword = (rule, value, callback) => {\r\n          if (value.length > 6 || value.length < 8) {\r\n              callback(new Error('新密码长度需在6-8个字符之间'))\r\n          } else {\r\n              callback()\r\n          }\r\n      }\r\n      const validateName = (rule, name, callback) => {\r\n          if (name.length < 6 || name.length > 8) {\r\n              callback(new Error('用户名长度需在6-8个字符之间'));\r\n          } else if (!/^[a-zA-Z0-9]+$/.test(name)) { // 然后使用正则表达式检查用户名是否只包含字母和数字\r\n              callback(new Error('用户名中不能包含特殊符号,.!！@#$%^&*()！。？/、+='));\r\n          } else {\r\n              callback(); // 如果以上两个条件都满足，则调用callback()表示验证通过\r\n          }\r\n      }\r\n      const validatePhone = (rule, phone, callback) => {\r\n          if (!/^1[34578]\\d{9}$/.test(phone)) {\r\n              callback(new Error('手机号格式不正确'));\r\n          } else {\r\n              callback(); // 如果以上两个条件都满足，则调用callback()表示验证通过\r\n          }\r\n      }\r\n      const validateEmail = (rule, email, callback) => {\r\n          if (!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n              .test(email)) {\r\n              callback(new Error('邮箱格式不正确'));\r\n          } else {\r\n              callback(); // 如果以上两个条件都满足，则调用callback()表示验证通过\r\n          }\r\n      }\r\n      return {\r\n          user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n          dialogVisible: false,\r\n          rules: {\r\n              password: [\r\n                  {required: true, message: '请输入原始密码', trigger: 'blur'},\r\n              ],\r\n              newPassword: [\r\n                  {required: true, message: '请输入新密码', trigger: 'blur'},\r\n                  {validator: validateNewPassword, required: true, trigger: 'blur'},\r\n\r\n              ],\r\n              confirmPassword: [\r\n                  {validator: validatePassword, required: true, trigger: 'blur'},\r\n              ],\r\n              name: [\r\n                  {validator: validateName, trigger: 'blur'}\r\n              ],\r\n              phone: [\r\n                  {validator: validatePhone, trigger: 'blur'}\r\n              ],\r\n              email: [\r\n                  {validator: validateEmail, trigger: 'blur'}\r\n              ],\r\n          }\r\n      }\r\n  },\r\n  created() {\r\n\r\n  },\r\n  methods: {\r\n    update() {\r\n        this.$refs['formRef'].validate((valid) => {\r\n            if (valid) {\r\n                // 保存当前的用户信息到数据库\r\n                this.$request.put('/admin/update', this.user).then(res => {\r\n                    if (res.code === '200') {\r\n                        // 成功更新\r\n                        this.$message.success('保存成功')\r\n\r\n                        // 更新浏览器缓存里的用户信息\r\n                        localStorage.setItem('xm-user', JSON.stringify(this.user))\r\n\r\n                        // 触发父级的数据更新\r\n                        this.$emit('update:user')\r\n                    } else {\r\n                        this.$message.error(res.msg)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    },\r\n    handleAvatarSuccess(response, file, fileList) {\r\n      // 把user的头像属性换成上传的图片的链接\r\n      this.$set(this.user, 'avatar', response.data)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/deep/.el-form-item__label {\r\n  font-weight: bold;\r\n}\r\n/deep/.el-upload {\r\n  border-radius: 50%;\r\n}\r\n/deep/.avatar-uploader .el-upload {\r\n  border: 1px dashed #d9d9d9;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n  border-radius: 50%;\r\n}\r\n/deep/.avatar-uploader .el-upload:hover {\r\n  border-color: #409EFF;\r\n}\r\n.avatar-uploader-icon {\r\n  font-size: 28px;\r\n  color: #8c939d;\r\n  width: 120px;\r\n  height: 120px;\r\n  line-height: 120px;\r\n  text-align: center;\r\n  border-radius: 50%;\r\n}\r\n.avatar {\r\n  width: 120px;\r\n  height: 120px;\r\n  display: block;\r\n  border-radius: 50%;\r\n}\r\n</style>"],"mappings":"AAoCA;EACAA,IAAA;EACAC,KAAA;IACA,MAAAC,gBAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAG,IAAA,CAAAC,WAAA;QACAH,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA,MAAAI,mBAAA,GAAAA,CAAAN,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,CAAAM,MAAA,QAAAN,KAAA,CAAAM,MAAA;QACAL,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA,MAAAM,YAAA,GAAAA,CAAAR,IAAA,EAAAH,IAAA,EAAAK,QAAA;MACA,IAAAL,IAAA,CAAAU,MAAA,QAAAV,IAAA,CAAAU,MAAA;QACAL,QAAA,KAAAC,KAAA;MACA,6BAAAM,IAAA,CAAAZ,IAAA;QAAA;QACAK,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;;IACA,MAAAQ,aAAA,GAAAA,CAAAV,IAAA,EAAAW,KAAA,EAAAT,QAAA;MACA,uBAAAO,IAAA,CAAAE,KAAA;QACAT,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;;IACA,MAAAU,aAAA,GAAAA,CAAAZ,IAAA,EAAAa,KAAA,EAAAX,QAAA;MACA,+JACAO,IAAA,CAAAI,KAAA;QACAX,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;;IACA;MACAE,IAAA,EAAAU,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,aAAA;MACAC,KAAA;QACAC,QAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAlB,WAAA,GACA;UAAAgB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,SAAA,EAAAlB,mBAAA;UAAAe,QAAA;UAAAE,OAAA;QAAA,EAEA;QACAE,eAAA,GACA;UAAAD,SAAA,EAAAzB,gBAAA;UAAAsB,QAAA;UAAAE,OAAA;QAAA,EACA;QACA1B,IAAA,GACA;UAAA2B,SAAA,EAAAhB,YAAA;UAAAe,OAAA;QAAA,EACA;QACAZ,KAAA,GACA;UAAAa,SAAA,EAAAd,aAAA;UAAAa,OAAA;QAAA,EACA;QACAV,KAAA,GACA;UAAAW,SAAA,EAAAZ,aAAA;UAAAW,OAAA;QAAA;MAEA;IACA;EACA;EACAG,QAAA,GAEA;EACAC,OAAA;IACAC,OAAA;MACA,KAAAC,KAAA,YAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,KAAAC,QAAA,CAAAC,GAAA,uBAAA7B,IAAA,EAAA8B,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACA;cACA,KAAAC,QAAA,CAAAC,OAAA;;cAEA;cACAtB,YAAA,CAAAuB,OAAA,YAAAzB,IAAA,CAAA0B,SAAA,MAAApC,IAAA;;cAEA;cACA,KAAAqC,KAAA;YACA;cACA,KAAAJ,QAAA,CAAAK,KAAA,CAAAP,GAAA,CAAAQ,GAAA;YACA;UACA;QACA;MACA;IACA;IACAC,oBAAAC,QAAA,EAAAC,IAAA,EAAAC,QAAA;MACA;MACA,KAAAC,IAAA,MAAA5C,IAAA,YAAAyC,QAAA,CAAA/C,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}