{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: \"MyChart2.0\",\n  data() {\n    return {\n      pagesList: [],\n      tableData: [],\n      pageNum: 1,\n      pageSize: 2,\n      total: 0,\n      form: {},\n      backendData: '',\n      myChart: null,\n      myCharts: [],\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}')\n    };\n  },\n  mounted() {\n    this.load(1).then(() => {\n      this.initChart(); // 确保数据加载完成后再初始化图表\n    });\n  },\n\n  watch: {\n    tableData() {\n      // 监听tableData的变化\n      if (!this.myChart && this.tableData.length > 0) {\n        this.initChart();\n      } else if (this.myChart && this.chartDataLoaded) {\n        // 如果图表已初始化且数据已加载，则更新图表\n        this.updateChart();\n      }\n    }\n  },\n  methods: {\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n    },\n    // 修改 load 方法，使其返回一个 Promise\n    load(pageNum) {\n      return new Promise((resolve, reject) => {\n        if (pageNum) this.pageNum = pageNum;\n        this.$request.get('/chart/selectPage', {\n          params: {\n            pageNum: this.pageNum,\n            pageSize: this.pageSize\n          }\n        }).then(res => {\n          this.tableData = res.data?.list;\n          this.total = res.data?.total;\n          this.pagesList = this.tableData;\n          this.chartDataLoaded = true; // 设置图表数据已加载的标志\n          resolve(); // 数据加载完成后 resolve 这个 Promise\n        }).catch(error => {\n          reject(error); // 如果有错误，则 reject 这个 Promise\n        });\n      });\n    },\n\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    },\n    // 修改 initChart 方法，确保对于每个图表都能正确初始化\n    initChart() {\n      if (this.$refs.aiOption && this.$refs.aiOption.length > 0) {\n        // 遍历所有图表元素并初始化\n        this.$refs.aiOption.forEach((element, index) => {\n          if (!this[`myChart${index}`]) {\n            this[`myChart${index}`] = echarts.init(element);\n            this.updateChart(this[`myChart${index}`], index);\n          }\n        });\n      } else {\n        console.error('无法找到 aiOption 元素');\n      }\n    },\n    // 修改 updateChart 方法，确保根据索引更新正确的图表\n    updateChart(chart, index) {\n      if (chart && this.tableData[index]?.genChart) {\n        const genChart = JSON.parse(this.tableData[index].genChart);\n        chart.setOption(genChart);\n      } else {\n        console.error(\"genChart 为空或不存在\");\n        this.$message.error(\"图表配置为空或不存在\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","pagesList","tableData","pageNum","pageSize","total","form","backendData","myChart","myCharts","user","JSON","parse","localStorage","getItem","mounted","load","then","initChart","watch","length","chartDataLoaded","updateChart","methods","formatTime","timestamp","date","Date","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","Promise","resolve","reject","$request","get","params","res","list","catch","error","handleCurrentChange","$refs","aiOption","forEach","element","index","init","console","chart","genChart","setOption","$message"],"sources":["src/views/front/MyChart2.0.vue"],"sourcesContent":["<template>\r\n    <div class=\"main-content\">\r\n\r\n        <div style=\"display: flex; margin-left: 40%; margin-top: 20px; margin-right: 2%;\">\r\n            <div class=\"title\" style=\"width: 40%; height: 50%; font-size: 30px; background-color: #fff; border-radius: 20px;\">\r\n                <div style=\"margin-top: 20px; margin-bottom: 20px; margin-left: 100px;\">\r\n                    <strong>AI智能分析</strong>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <el-row :gutter=\"10\">\r\n            <el-col shadow=\"hover\" :span=\"8\" v-for=\"item in pagesList\" :key=\"item.id\"\r\n                    style=\"margin-top: 30px; margin-left: 4%; width: 44%\">\r\n                <div class=\"text-title\" style=\"font-size: 20px; margin: 20px 2%; width: 100%; background-color: #fff; border-radius: 20px;\">\r\n\r\n                    <div style=\"margin-left: 20px;\">\r\n                        <strong style=\"margin-top: 20px;\">AI分析{{ item.name }}目标：《{{ item.goal }}》</strong><br/>\r\n                        <el-divider></el-divider>\r\n\r\n                        <strong style=\"\">AI分析{{ item.name }}时间：{{ formatTime(item.createTime) }}</strong><br/>\r\n                        <el-divider></el-divider>\r\n\r\n                        <strong style=\"\">AI分析{{ item.name }}结论</strong>\r\n                    </div>\r\n\r\n                    <div style=\"margin: 20px 20px; word-wrap: break-word; font-size: 20px;\">{{ item.genResult }}</div>\r\n                </div>\r\n\r\n                <div class=\"table-title\" style=\"margin-left: 2%; width: 100%; background-color: #fff; border-radius: 20px;\">\r\n                    <div class=\"box-title\" style=\"border-radius: 3px; margin-left: 20px; font-size: 20px; width: 95%;\">\r\n                        <strong>AI可视化图表</strong>\r\n                    </div>\r\n                    <div style=\"margin-left: 40px; margin-top: 20px; display: flex; grid-gap: 10px\">\r\n                        <div style=\"flex: 1\">\r\n                            <div ref=\"aiOption\" style=\"height: 400px; font-size: 20px;\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </el-col>\r\n        </el-row>\r\n\r\n        <div style=\"margin-left: 15%; color: white\">\r\n            <el-pagination\r\n                :background=\"true\"\r\n                @current-change=\"handleCurrentChange\"\r\n                :current-page=\"pageNum\"\r\n                :page-sizes=\"[5, 10, 20]\"\r\n                :page-size=\"pageSize\"\r\n                layout=\"total, prev, pager, next\"\r\n                :total=\"total\"\r\n            >\r\n            </el-pagination>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n    name: \"MyChart2.0\",\r\n    data() {\r\n        return {\r\n            pagesList: [],\r\n            tableData: [],\r\n            pageNum: 1,\r\n            pageSize: 2,\r\n            total: 0,\r\n            form: {},\r\n            backendData: '',\r\n            myChart: null,\r\n            myCharts: [],\r\n            user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n        }\r\n    },\r\n    mounted() {\r\n        this.load(1).then(() => {\r\n            this.initChart(); // 确保数据加载完成后再初始化图表\r\n        });\r\n    },\r\n    watch: {\r\n        tableData() { // 监听tableData的变化\r\n            if (!this.myChart && this.tableData.length > 0) {\r\n                this.initChart();\r\n            } else if (this.myChart && this.chartDataLoaded) {\r\n                // 如果图表已初始化且数据已加载，则更新图表\r\n                this.updateChart();\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        formatTime(timestamp) {\r\n            const date = new Date(timestamp);\r\n            return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\r\n        },\r\n        // 修改 load 方法，使其返回一个 Promise\r\n        load(pageNum) {\r\n            return new Promise((resolve, reject) => {\r\n                if (pageNum) this.pageNum = pageNum;\r\n                this.$request.get('/chart/selectPage', {\r\n                    params: {\r\n                        pageNum: this.pageNum,\r\n                        pageSize: this.pageSize,\r\n                    }\r\n                }).then(res => {\r\n                    this.tableData = res.data?.list;\r\n                    this.total = res.data?.total;\r\n                    this.pagesList = this.tableData;\r\n                    this.chartDataLoaded = true; // 设置图表数据已加载的标志\r\n                    resolve(); // 数据加载完成后 resolve 这个 Promise\r\n                }).catch(error => {\r\n                    reject(error); // 如果有错误，则 reject 这个 Promise\r\n                });\r\n            });\r\n        },\r\n        handleCurrentChange(pageNum) {\r\n            this.load(pageNum);\r\n        },\r\n        // 修改 initChart 方法，确保对于每个图表都能正确初始化\r\n        initChart() {\r\n            if (this.$refs.aiOption && this.$refs.aiOption.length > 0) {\r\n                // 遍历所有图表元素并初始化\r\n                this.$refs.aiOption.forEach((element, index) => {\r\n                    if (!this[`myChart${index}`]) {\r\n                        this[`myChart${index}`] = echarts.init(element);\r\n                        this.updateChart(this[`myChart${index}`], index);\r\n                    }\r\n                });\r\n            } else {\r\n                console.error('无法找到 aiOption 元素');\r\n            }\r\n        },\r\n        // 修改 updateChart 方法，确保根据索引更新正确的图表\r\n        updateChart(chart, index) {\r\n            if (chart && this.tableData[index]?.genChart) {\r\n                const genChart = JSON.parse(this.tableData[index].genChart);\r\n                chart.setOption(genChart);\r\n            } else {\r\n                console.error(\"genChart 为空或不存在\");\r\n                this.$message.error(\"图表配置为空或不存在\");\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style>\r\nbody {\r\n    background-color: #dac9c9;\r\n}\r\n</style>\r\n"],"mappings":"AA0DA,YAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,SAAA;MACAC,OAAA;MACAC,QAAA;MACAC,KAAA;MACAC,IAAA;MACAC,WAAA;MACAC,OAAA;MACAC,QAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,IAAA,IAAAC,IAAA;MACA,KAAAC,SAAA;IACA;EACA;;EACAC,KAAA;IACAjB,UAAA;MAAA;MACA,UAAAM,OAAA,SAAAN,SAAA,CAAAkB,MAAA;QACA,KAAAF,SAAA;MACA,gBAAAV,OAAA,SAAAa,eAAA;QACA;QACA,KAAAC,WAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,WAAAC,SAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,SAAA;MACA,UAAAC,IAAA,CAAAE,WAAA,OAAAF,IAAA,CAAAG,QAAA,QAAAC,QAAA,GAAAC,QAAA,YAAAL,IAAA,CAAAM,OAAA,GAAAF,QAAA,GAAAC,QAAA,YAAAL,IAAA,CAAAO,QAAA,GAAAH,QAAA,GAAAC,QAAA,YAAAL,IAAA,CAAAQ,UAAA,GAAAJ,QAAA,GAAAC,QAAA;IACA;IACA;IACAf,KAAAb,OAAA;MACA,WAAAgC,OAAA,EAAAC,OAAA,EAAAC,MAAA;QACA,IAAAlC,OAAA,OAAAA,OAAA,GAAAA,OAAA;QACA,KAAAmC,QAAA,CAAAC,GAAA;UACAC,MAAA;YACArC,OAAA,OAAAA,OAAA;YACAC,QAAA,OAAAA;UACA;QACA,GAAAa,IAAA,CAAAwB,GAAA;UACA,KAAAvC,SAAA,GAAAuC,GAAA,CAAAzC,IAAA,EAAA0C,IAAA;UACA,KAAArC,KAAA,GAAAoC,GAAA,CAAAzC,IAAA,EAAAK,KAAA;UACA,KAAAJ,SAAA,QAAAC,SAAA;UACA,KAAAmB,eAAA;UACAe,OAAA;QACA,GAAAO,KAAA,CAAAC,KAAA;UACAP,MAAA,CAAAO,KAAA;QACA;MACA;IACA;;IACAC,oBAAA1C,OAAA;MACA,KAAAa,IAAA,CAAAb,OAAA;IACA;IACA;IACAe,UAAA;MACA,SAAA4B,KAAA,CAAAC,QAAA,SAAAD,KAAA,CAAAC,QAAA,CAAA3B,MAAA;QACA;QACA,KAAA0B,KAAA,CAAAC,QAAA,CAAAC,OAAA,EAAAC,OAAA,EAAAC,KAAA;UACA,oBAAAA,KAAA;YACA,eAAAA,KAAA,MAAApD,OAAA,CAAAqD,IAAA,CAAAF,OAAA;YACA,KAAA3B,WAAA,gBAAA4B,KAAA,KAAAA,KAAA;UACA;QACA;MACA;QACAE,OAAA,CAAAR,KAAA;MACA;IACA;IACA;IACAtB,YAAA+B,KAAA,EAAAH,KAAA;MACA,IAAAG,KAAA,SAAAnD,SAAA,CAAAgD,KAAA,GAAAI,QAAA;QACA,MAAAA,QAAA,GAAA3C,IAAA,CAAAC,KAAA,MAAAV,SAAA,CAAAgD,KAAA,EAAAI,QAAA;QACAD,KAAA,CAAAE,SAAA,CAAAD,QAAA;MACA;QACAF,OAAA,CAAAR,KAAA;QACA,KAAAY,QAAA,CAAAZ,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}